@page "/listingslist"

@using BattleShipV3.Client.DesignPatterns.Singleton
@using BattleShipV3.Shared
@using BattleShipV3.Shared.Data.Commands.Listing.Create
@using BattleShipV3.Shared.Data.Commands.Listing.Update
@using BattleShipV3.Shared.Data.Interfaces
@using Microsoft.AspNetCore.SignalR.Client
@using MudBlazor
@using Models
@using MudBlazor.ThemeManager

@inject ToastService toastService
@inject NavigationManager Navigation
@inject ListingService listingService


@implements IAsyncDisposable

<MudText>
    Online users: @OnlinePlayersSingleton.OnlineUsers.Count
</MudText>

@if(Global.CurrentUser != null)
{
    <MudText>You are logged in as @($"{Global.CurrentUser?.Name}")</MudText>
}

<MudButton Color="Color.Secondary" Variant="Variant.Filled" @onclick="ToggleLobbyCreate" Style="margin:5px">Create a Lobby</MudButton>

<MudButton Color="Color.Secondary" Variant="Variant.Filled" @onclick="JoinLobby" Disabled="selectedListing == null
                || selectedListing.PlayerOne.Id == Global.CurrentUser.Id || selectedListing.PlayerTwo?.Id == Global.CurrentUser.Id" Style="margin:5px">Join a Lobby</MudButton>

@if(isLobbyCreatePopUpOpen)
{
     <MudPopover Open="@isLobbyCreatePopUpOpen" Fixed="true" Class="px-4 pt-4">
        <div class="d-flex flex-column">
            <MudText>Create a Lobby</MudText>
            <MudText>Lobby Name:</MudText>
            <MudInputString @bind-Value="lobbyName"></MudInputString>
            <MudText>Minimum elo</MudText>
            <MudNumericField @bind-Value="eloFrom"></MudNumericField>
            <MudText>Maximum elo</MudText>
            <MudNumericField @bind-Value="eloTo"></MudNumericField>
            <MudButton OnClick="@CreateLobby" Class="ml-auto mr-n3 mb-1" Disabled="@(lobbyName == null || lobbyName.Length < 3)" Color="Color.Success">Create</MudButton>
            <MudButton OnClick="@ToggleLobbyCreate" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Close</MudButton>
        </div>
</MudPopover>
}


<MudTable Items="@listings" Hover="true" Striped="true" Filter="new Func<Listing,bool>(FilterFunc1)" @bind-SelectedItem="selectedListing">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Match Listings</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Players</MudTh>
        <MudTh>@(">=")</MudTh>
        <MudTh>@("<")</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Creator</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Players">@($"{GetLobbySize(context)}/2")</MudTd>
        <MudTd DataLabel=">=">@context.EloFrom</MudTd>
        <MudTd DataLabel="<">@context.EloTo</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Creator">@context.PlayerOne.Name</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>

</MudTable>


<div class="d-flex flex-wrap mt-4">
    <div style="min-width:200px;">
        <MudText Inline="true" Class="align-self-center">Selected: @selectedListing?.Name</MudText>
    </div>
</div>


@code {
    private HubConnection? hubConnection;
    private string searchString = "";
    private Listing selectedListing;

    List<Listing> listings { get; set; } = new List<Listing>();

    private bool isLobbyCreatePopUpOpen = false;

    //Lobby creation
    double eloFrom, eloTo;
    string lobbyName;

    protected override async Task OnInitializedAsync()
    {
        if (Global.CurrentUser == null)
            Navigation.NavigateTo("/login");

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/lobbyhub"))
            .WithAutomaticReconnect()
            .Build();


        hubConnection.On<Listing, Models.User>("CreateListing", (lobby, user) =>
        {
            lobby.PlayerOne = user;
            listings.Add(lobby);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<Listing, User>("JoinedListing", (lobby, user) =>
        {
            listings[listings.FindIndex(e => e.Id == lobby.Id)].PlayerTwo = user;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<Listing, User>("LeftListing", (lobby, user) =>
        {
            if (GetLobbySize(lobby) == 0)
                listings.Remove(lobby);
            else
                listings[listings.FindIndex(e => e.Id == lobby.Id)].PlayerTwo = null;

            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<Listing, User>("DeleteListing", (lobby, user) =>
        {
            listings.RemoveAll(e => e.Id == lobby.Id);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<User>("UserLoggedIn", (user) =>
        {
            OnlinePlayersSingleton.OnlineUsers.Add(user);
            Console.WriteLine(OnlinePlayersSingleton.OnlineUsers.Count);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

        await Load();

        await InvokeAsync(StateHasChanged);
        StateHasChanged();
    }

    private void ToggleLobbyCreate()
    {
        isLobbyCreatePopUpOpen = isLobbyCreatePopUpOpen ? false : true;
    }

    private async Task JoinLobby()
    {
        if (hubConnection is null)
            return;

        await hubConnection.SendAsync("JoinedListing", selectedListing, Global.CurrentUser);

        var cmd = new UpdateListingCommand(Global.CurrentUser);

        await listingService.UpdateListingAsync(selectedListing.Id, cmd);

        Navigation.NavigateTo($"/listingslist/{selectedListing.Id}");
    }

    private async Task CreateLobby()
    {
        if (hubConnection is null || Global.CurrentUser is null)
            return;

        ToggleLobbyCreate();

        var createdListing = new CreateListingCommand(lobbyName, eloFrom, eloTo, Global.CurrentUser);

        var response = await listingService.InsertListingAsync(createdListing);

        await hubConnection.SendAsync("CreateListing", response, Global.CurrentUser);

        Navigation.NavigateTo($"/listingslist/{response?.Id}");
    }

    private int GetLobbySize(Listing arg)
    {
        int ret = 0;
        if (arg.PlayerOne != null)
            ret++;
        if (arg.PlayerTwo != null)
            ret++;

        return ret;
    }

    private async Task Load()
    {
        listings = await listingService.GetListingsAsync();
    }

    private bool FilterFunc1(Listing element) => FilterFunc(element, searchString);

    private bool FilterFunc(Listing element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.PlayerOne.Name}".Contains(searchString))
            return true;
        return false;
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public void Update(ISubject subject)
    {
        Console.WriteLine("ConcreteObserverA: Reacted to the event.");
    }

}