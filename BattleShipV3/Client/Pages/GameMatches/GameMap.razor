@using BattleShipV3.Client.DesignPatterns.Prototype
@using BattleShipV3.Data.Models
@using BattleShipV3.Shared.Data.Models
@using static BattleShipV3.Data.Enums

<h3>Map</h3>

@if(Player != null && Player.User != null && Player.Ships != null && actualMap != null)
{
    <MudItem>
        <MudGrid Spacing="10" Justify="Justify.SpaceBetween">
        <MudItem>
            <MudGrid Spacing="1">
                @for(int i = 0; i < 10; i++)
                {
                    int x = i;
                    <MudItem>
                        @for(int j = 0; j < 10; j++)
                            {
                            int y = j;
                            <MudItem Style="margin-bottom:5px">
                                @if(actualMap.playField[x][y].squareType == SquareType.SHIP)
                                {
                                    <MudPaper @onclick="() => OnClickGridPaper(x,y,false)" Style="@ColorEnumToHex(actualMap.playField[x][y].ship)"
                                        Square="true" Height="25px" Width="25px"></MudPaper>
                                }
                                else
                                {
                                    <MudPaper @onclick="() => OnClickGridPaper(x,y,false)" Square="true" Height="25px" Width="25px" ></MudPaper>
                                }
                                
                            </MudItem>
                            }
                    </MudItem>
                }
            </MudGrid>
        </MudItem>

        <MudItem>
            <MudGrid Spacing="1">
                @for(int i = 0; i< 10; i++)
                {
                    <MudItem >
                        @for(int j = 0; j < 10; j++)
                            {
                            <MudItem Style="margin-bottom:5px">
                                <MudPaper @onclick="() => OnClickGridPaper(i,j, true)" Square="true" Height="25px" Width="25px" ></MudPaper>
                            </MudItem>
                            }
                    </MudItem>
                }
            </MudGrid>
        </MudItem>
        </MudGrid>
    </MudItem>
    @*&& item.Id == selectedShip.Id*@
    @*selectedShip != null*@
    @foreach (var item in Player.Ships)
    {
        <MudButton Color="Color.Secondary" Variant="Variant.Filled" @onclick="() => SelectShip(item)"
            Disabled="PlacedShips.Contains(item)" Style="margin:5px">@(item.Name + " " + item.Length)</MudButton>
    }

    <MudButton Color="Color.Secondary" Variant="Variant.Filled" @onclick="() => IsRotated(selectedShip)"
            Disabled="selectedShip == null" Style="margin:5px">Rotate</MudButton>

    <MudGrid Spacing="2" Justify="Justify.SpaceBetween">
        <MudItem>
            <MudPaper Style="min-width:100px;max-width:400px;min-height:100px;">
                    <h3>DeepCopies</h3>
                @foreach (var item in playSquaresDeep)
                {
                    @*, ActionTime: @item.squareActionTime*@
                    <p>Xcoord: @item.squareXcoor, Ycoord: @item.squareYcoor, ActionOnSquare: @item.squareAction</p>
                }
                <p>----------------------------------------------</p>

            </MudPaper>
        </MudItem>
        <MudItem>
            <MudPaper Style="min-width:100px;max-width:400px;min-height:100px;">
                    <h3>ShallowCopies</h3>
                @foreach (var item in playSquaresShallow)
                {
                    @*, ActionTime: @item.squareActionTime*@
                    <p>Xcoord: @item.squareXcoor, Ycoord: @item.squareYcoor, ActionOnSquare: @item.squareAction</p>
                }
                <p>----------------------------------------------</p>

            </MudPaper>
        </MudItem>
    </MudGrid>
}



@code {


    [Parameter] public GamePhase gamePhase { get; set; }
    [Parameter] public GamePlayerModel Player { get; set; }
    //[Parameter] public BattleShipV3.Models.User User { get; set; }
    //[Parameter] public List< Player { get; set; }
    [Parameter] public static List<PlaySquare> playSquaresDeep { get; set; } = new List<PlaySquare>();
    [Parameter] public static List<PlaySquare> playSquaresShallow { get; set; } = new List<PlaySquare>();


    Ship selectedShip;

    List<Ship> PlacedShips = new List<Ship>();

    ActualMap actualMap;

    public List<int> Ids = Enumerable.Range(0, 99).ToList();

    protected override async Task OnInitializedAsync()
    {
        actualMap = new ActualMap();
    }

    public void OnClickGridPaper(int x, int y, bool isShooting)
    {
        if(gamePhase == GamePhase.LAYOUT && !isShooting)
        {
            PlaceShip(x, y);
        }
        else
        {
            //TODO SHOOT MISSILE
        }
    }

    public void SelectShip(Ship context)
    {
        this.selectedShip = context;
    }

    public bool IsRotated(Ship? context)
    {
        if (context.Rotation == ShipRotation.VERTICAL)
        {
            context.Rotation = ShipRotation.HORIZONTAL;
            return true;
        }
        else if (context.Rotation == ShipRotation.HORIZONTAL)
        {
            context.Rotation = ShipRotation.VERTICAL;
            return true;
        }
        return false;
    }

    public void PlaceShip(int x, int y)
    {
        if (selectedShip is null)
            return;

        if (selectedShip.Rotation == ShipRotation.HORIZONTAL && selectedShip.Length + x > 10)
            return;

        if (selectedShip.Rotation == ShipRotation.VERTICAL && selectedShip.Length + y > 10)
            return;

        if (actualMap.IsShipPlaced(selectedShip, x, y))
        {
            PlacedShips.Add(selectedShip);
            selectedShip = null;
        }
        StateHasChanged();
    }

    public string ColorEnumToHex(Ship context)
    {
        if(context.Color == ShipColor.WHITE)
        {
            return "background:#BDBDBD";
        }
        else if(context.Color == ShipColor.BLUE)
        {
            return "background:#1565C0";
        }
        else if(context.Color == ShipColor.GREEN)
        {
            return "background:#7CB342";
        }
        return "XD";
    }

    class ActualMap
    {
        //public Square[,] playField { get; set; }
        public List<Square[]> playField { get; set; }
        public PlaySquare oneplaySquare { get; set; }

        public ActualMap()
        {
            playField = new List<Square[]>();
            for (var i = 0; i < 11; i++)
            {
                playField.Add(new Square[11]);

                for (var j = 0; j < 11; j++)
                {
                    playField[i][j] = new Square(SquareType.NONE, null);
                }
            }
        }

        public bool IsShipPlaced(Ship ship, int x, int y)
        {
            if (IsAllowedToPlace(ship, x, y))
            {
                for (var i = 0; i < ship.Length; i++)
                {
                    if (ship.Rotation == ShipRotation.HORIZONTAL)
                    {
                        playField[x + i][y].AssignShip(ship);
                    }
                    else
                    {
                        playField[x][y + i].AssignShip(ship);
                    }
                }
                return true;
            }
            return false;
        }

        public bool IsAllowedToPlace(Ship ship, int x, int y)
        {

            //PlaySquare playSquare = new PlaySquare(0,0,"Nieko..");
            for (var i = 0; i < ship.Length; i++)
            {

                if (ship.Rotation == ShipRotation.HORIZONTAL){
                    if (playField[x + i][y].squareType == SquareType.SHIP)
                    {
                        //playSquare = new PlaySquare(x+i,y,"H - Negalimas");

                        PrototypeCopies(x + i, y, "H - Negalimas");/*, 1, false*/
                        return false;
                    }
                    //playSquare = new PlaySquare(x+i,y,"H - Galimas");
                    
                    PrototypeCopies(x + i, y, "H - Galimas");/*, 1, false*/
                }
                if (ship.Rotation == ShipRotation.VERTICAL)
                {
                    if (playField[x][y + i].squareType == SquareType.SHIP)
                    {
                        
                        PrototypeCopies(x + i, y, "V - Negalimas");/*, 2, false*/
                        return false;
                    }
                    //playSquare = new PlaySquare(x+i,y,"V - Galimas");
                    PrototypeCopies(x + i, y, "V - Galimas");
                }

            }
            return true;
        }

        private void AssignShip(Ship ship, int x, int y)
        {
            playField[x][y].AssignShip(ship);
        }
        private void PrototypeCopies(int x, int y, string actionName)/*,int rotation, bool possible*/
        {
            PlaySquare playSquare = new PlaySquare(x,y,actionName);
            playSquaresDeep.Add(playSquare.DeepCopy());
            playSquaresShallow.Add(playSquare.ShallowCopy());
        }

    }

    class Square
    {
        public SquareType squareType { get; set; }
        public Ship? ship { get; set; }

        public Square(SquareType squareType, Ship ship)
        {
            this.squareType = squareType;
            this.ship = ship;
        }

        public void AssignShip(Ship ship)
        {
            this.ship = ship;
            this.squareType = SquareType.SHIP;
        }
    }
}
