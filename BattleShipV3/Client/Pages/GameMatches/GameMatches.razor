<h3>GameMatches</h3>
@using BattleShipV3;
@using BattleShipV3.Client;
@using BattleShipV3.Shared;

@using BattleShipV3.Client.Pages.GameMatches;


@page "/gm"


<div> 
    <h1>aaaaaaaaaaaaaaaaaaaa</h1>
    <svg xmlns="http://www.w3.org/2000/svg" width="280" height="200">

    <p class="errorUI">Nothing to see here right now. Sorry! GameMatches start loading..</p>

    @foreach(var item in Squares)
    {
        
        <p class="errorUI">Nothing to see here right now. Sorry! MAP SETUP3 FOREACH</p>
        if (item.Is_Ship)
        {
            <rect width="25" x="@item.X" y="@item.Y" height="25" style="fill:darkred;stroke-width:1;stroke:orangered" />
        }
        else
        {
            <rect width="25" x="@item.X" y="@item.Y" height="25" @onclick="@(async() => await Add(item))" style="fill:#3886c8;stroke-width:1;stroke:#000000" />
        }
    }
</svg>
     @*<GameMatches Squares="@Squares" OnComplete="@(() => { is_setup = false;})"></GameMatches>*@


</div>
<p><button @onclick="@(()=> { shiptype = 1; })">Add 4 square ship</button></p>
<p><button @onclick="@(()=> { shiptype = 2; })">Add 3 square ship</button></p>
<p><button @onclick="@(()=> { shiptype = 3; })">Add 2 square ship</button></p>
<p><button @onclick="@(()=> { shiptype = 4; })">Add 1 square ship</button></p>

@code {
    int shiptype = 1;
    //bool is_setup = true;
    bool ship1_complete = false;
    bool ship2_complete = false;
    bool ship3_complete = false;
    bool ship4_complete = false;
    [Parameter]
    public List<GridModels.Square> Squares { get; set; }
    [Parameter]
    public EventCallback OnComplete { get; set; }

    public static Task<List<GridModels.Square>> GenerateSquares()
    {
        var result = new List<GridModels.Square>();
        int cur_x = 0;
        int cur_y = 0;

        for (int i = 0; i < 100; i++)
        {
            if (i % 10 == 0)
            {
                cur_x += 25;
                cur_y = 0;

            }
            result.Add(new GridModels.Square() { Id = Guid.NewGuid().ToString(), X = cur_x, Y = cur_y });
            cur_y += 25;
        }
        return Task.FromResult(result);
    }



    async Task Add(GridModels.Square square)
    {
        if (shiptype == 1 && !ship1_complete)
        {
            if (await DataGenerator.AddShip(4, square, Squares))
            {
                ship1_complete = true;
            }
        }
        if (shiptype == 2 && !ship2_complete)
        {
            if (await DataGenerator.AddShip(3, square, Squares))
            {
                ship2_complete = true;
            }
        }
        if (shiptype == 3 && !ship3_complete)
        {
            if (await DataGenerator.AddShip(2, square, Squares))
            {
                ship3_complete = true;
            }
        }
        if (shiptype == 4 && !ship4_complete)
        {
            if (await DataGenerator.AddShip(1, square, Squares))
            {
                ship4_complete = true;
            }
        }
        if (ship1_complete && ship2_complete && ship3_complete && ship4_complete)
        {
            Console.WriteLine("ONCOMPLETE");
            await OnComplete.InvokeAsync();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        //squares_AI = await DataGenerator.GenerateSquares();
        Squares = await GenerateSquares();
        //await DataGenerator.GenerateShips(squares_AI);
    }
}
  @*  int status = 1;

    int livesleft_AI = 14;
    int livesleft_Player = 14;


    List<GridModels.Square> squares_AI;
    List<Square> squares_Player;

    //bool is_AIturn = false;
    //MapPlayer playermapref;


    async Task ChangeTurn_FromUI(bool result)
    {
        is_AIturn = true;
        if (result)
        {
            livesleft_AI -= 1;
        }
        if(livesleft_AI == 0)
        {
            status = 2;
            return;
        }
        await UI_Select();
    }*@
@*<style>
    rect {
        fill:#226674;stroke-width:1;stroke:orangered;
    }
    rect:hover{
        fill:#3886c8;stroke-width:1;stroke:#000000;
    }
    h1 {
        background-color: brown;font-family: Tahoma, Geneva, Verdana, sans-serif;
    }
    h1:hover{
        background-color:orangered;font-family: Tahoma, Geneva, Verdana, sans-serif;
    }
</style>*@