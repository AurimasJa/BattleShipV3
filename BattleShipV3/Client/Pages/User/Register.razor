@page "/register"

@using BattleShipV3.Shared
@using BattleShipV3.Shared.Data.Commands.User.Create
@using MudBlazor;
@using Radzen.Blazor
@using Models

@inject ToastService toastService
@inject NavigationManager Navigation
@*@using BattleShipV3.Server*@

@inject UserService userService



<MudContainer Class="mt-12" MaxWidth="MaxWidth.Small">
    <MudPaper Elevation="2" Class="pa-4" Style="height: 570px;">
    <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">Register</MudText>
    <MudGrid Spacing="6" Class="mt-16">
        <MudItem xs="12">
            <MudText Typo="Typo.h5" GutterBottom="true">Your information</MudText>
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField T="string" InputType="InputType.Text" @bind-Value="_userName" Label="Username" />
                </MudItem>

                <MudItem xs="12">
                    <MudTextField T="string" InputType="InputType.Email" @bind-Value="_email" Label="Email" />
                </MudItem>

                <MudItem xs="12">
                    <MudTextField T="string" InputType="InputType.Password" @bind-Value="_password" Label="Password" />
                </MudItem>

                <MudItem xs="12">
                    <MudTextField T="string" InputType="InputType.Password" @bind-Value="_passwordConfirmation" Label="Password" />
                </MudItem>
                <MudItem xs="12" Class="d-flex justify-center">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await RegisterUser())">Register</MudButton>
                </MudItem>
                <MudItem xs="12" Class="d-flex justify-center">
                    <MudButton Variant="Variant.Text" OnClick="NavigateToLogin">Already have an account? Login here</MudButton>
                </MudItem>
            </MudGrid>
        </MudItem>

    </MudGrid>
    </MudPaper>
</MudContainer>
@code {
    string _userName { get; set; }
    string _email { get; set; }
    string _password { get; set; }
    string _passwordConfirmation { get; set; }

    protected async Task OnInitializedAsync()
    {
        
    }

    protected async Task RegisterUser()
    {
        if (UserIsValid())
        {                //TOAST NEVEIKIA
            await Task.Run(() => toastService.ShowToast("Created", Data.Enums.ToastLevel.Success));
            await toastService.ShowToastAsync("Created", Data.Enums.ToastLevel.Success);
            CreateUserCommand user = new CreateUserCommand(_userName, _email, _password);
            await userService.InsertUserAsync(user);
            Navigation.NavigateTo("/login");
        }
        else
        {                //TOAST NEVEIKIA
            await Task.Run(() => toastService.ShowToast("Info", Data.Enums.ToastLevel.Error));
            await toastService.ShowToastAsync("Info", Data.Enums.ToastLevel.Error);
        }
    }

    protected bool UserIsValid(){
        if (!_email.Contains('@') || _email is null)
        {
            return false;
        }
        else if (_password.Length < 3 || _password is null)
        {
            return false;
        }
        else if(!_password.Equals(_passwordConfirmation) || _passwordConfirmation is null)
        {
            return false;
        }
        else if(_userName is null)
        {
            return false;
        }
        return true;
    }

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }
}
