@page "/pointsshop"

@using BattleShipV3.Client.DesignPatterns.Facade
@using BattleShipV3.Client.DesignPatterns.Factory
@using BattleShipV3.Client.DesignPatterns.Lab2.Template;
@using BattleShipV3.Shared
@using BattleShipV3.Shared.Chain
@using BattleShipV3.Shared.Data
@using BattleShipV3.Data.Models
@using BattleShipV3.Client.Services
@using BattleShipV3.Shared.Data.Commands.User.Update
@using BattleShipV3.Shared.Data.Commands.UserShips.Create
@using BattleShipV3.Shared.Data.Interfacess
@using BattleShipV3.Shared.Proxy
@using BattleShipV3.Shared.Visitoras.Visitor
@using MudBlazor
@using Models
@using Data
@using static BattleShipV3.Data.Enums

@inject NavigationManager Navigation
@inject UserShipsService userShipsService
@inject ShipService shipService
@inject UserService userService

<PageTitle>Points shop</PageTitle>

<MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">Welcome to the shop!</MudText>
<MudText Typo="Typo.h5" Align="Align.Center">Here you can spend your hard earned points to improve your gameplay experience.</MudText>
<br />
<MudTable Items="@ownedShips" Hover="true" Striped="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Owned ships</MudText>
        <MudSpacer />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Ship Name</MudTh>
        <MudTh>Ship Length</MudTh>
        <MudTh>Special</MudTh>
        <MudTh>Special Bonus</MudTh>
        <MudTh>Missile Type</MudTh>
        <MudTh>Missile Cooldown</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTh>@context.Name</MudTh>
        <MudTh>@context.Length</MudTh>
        <MudTh>@context.GetSpecialtyName()</MudTh>
        <MudTh>@context.GetSpecialtyBonus()</MudTh>
        <MudTh>@context.Missile.MissileType</MudTh>
        <MudTh>@context.Missile.Cooldown</MudTh>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>

</MudTable>
<br />
@*proxy*@
@if (Global.CurrentUser != null && secureNestProxy.Access(Global.CurrentUser.Name) && Global.CurrentUser.Name != null)
{
    @*chain*@
    <MudText>@PurchaseInfo(purchaseType.ToString())</MudText>
    
    <MudTable Items="@ships" Hover="true" Filter="new Func<Ship,bool>(FilterFunc)" @bind-SelectedItem="selectedShip" @onclick="@BuyShip">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Ships</MudText>
            <MudSpacer />
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Ship Name</MudTh>
            <MudTh>Ship Length</MudTh>
            <MudTh>Special</MudTh>
            <MudTh>Special Bonus</MudTh>
            <MudTh>Missile Type</MudTh>
            <MudTh>Missile Cooldown</MudTh>
            <MudTh>Price</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTh>@context.Name</MudTh>
            <MudTh>@context.Length</MudTh>
            <MudTh>@context.GetSpecialtyName()</MudTh>
            <MudTh>@context.GetSpecialtyBonus()</MudTh>
            <MudTh>@context.Missile.MissileType</MudTh>
            <MudTh>@context.Missile.Cooldown</MudTh>
            <MudTh>@GetCost(context)</MudTh>
        </RowTemplate>
    </MudTable>
    <MudText>Purchase with:</MudText>
    <MudButton Color="Color.Secondary" Disabled="@(purchaseType == PurchaseType.POINTS)" Variant="Variant.Filled" @onclick="() => SetPurchaseType(PurchaseType.POINTS)" Style="margin:5px">Points</MudButton>
    <MudButton Color="Color.Secondary" Disabled="@(purchaseType == PurchaseType.CASH)" Variant="Variant.Filled" @onclick="() => SetPurchaseType(PurchaseType.CASH)" Style="margin:5px">Cash</MudButton>
    <MudButton Color="Color.Secondary" Disabled="@(purchaseType == PurchaseType.TICKET)" Variant="Variant.Filled" @onclick="() => SetPurchaseType(PurchaseType.TICKET)" Style="margin:5px">Tickets</MudButton>
}
else
{
    @*chain*@
    <MudText>@PurchaseInfo("BAN")</MudText>
}



@code {
    List<Ship> ownedShips { get; set; }
    List<Ship> ships { get; set; }
    Ship selectedShip { get; set; }
    //proxy
    SecureNestProxy secureNestProxy = new SecureNestProxy(new RealNest());
    //chain
    PointsHandlerChain pointsHandler = new PointsHandlerChain();
    CashHandlerChain cashHandler = new CashHandlerChain();
    TicketHandlerChain ticketHandler = new TicketHandlerChain();
    BanHandlerChain banHandler = new BanHandlerChain();

    PurchaseType? purchaseType { get; set; } = PurchaseType.POINTS;
    Facade facade { get; set; }
    protected override async Task OnInitializedAsync()
    {
        if (Global.CurrentUser is null)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        //chain
        pointsHandler.SetNext(cashHandler);
        cashHandler.SetNext(ticketHandler);
        ticketHandler.SetNext(banHandler);
        ownedShips = await shipService.GetShipsByUserAsync(Global.CurrentUser.Id);
        ships = await shipService.GetShipsAsync();
        facade = new Facade(userShipsService, shipService, userService);
        await InvokeAsync(StateHasChanged);
        StateHasChanged();
    }
    //chain
    public string PurchaseInfo(string type)
    {
        return ChainResponse(pointsHandler, type.ToString());
    }
    public void SetPurchaseType(PurchaseType type)
    {
        this.purchaseType = type;
        StateHasChanged();
    }

    public IPurchase PurchaseSwitch(Ship ship) => purchaseType switch
    {
        PurchaseType.TICKET => CreatePurchase(new TicketTemplate(ship)),
        PurchaseType.CASH => CreatePurchase(new CashTemplate(ship)),
        _ => CreatePurchase(new PointsTemplate(ship))
    };
    //chain
    public string ChainResponse(AbstractHandler handler, string type)
    {
        var result = handler.Handle(type);

        if (result != null)
        {
            return result.ToString();
        }
        else
        {
            return type.ToString();
        }
        
    }
    protected string GetCost(Ship ship)
    {
        //template method
        IPurchase purchase = PurchaseSwitch(ship);
        //visitor
        purchase.accept(new TaxVisitor());
        return purchaseType == PurchaseType.CASH ? $"${purchase.Cost}" : purchase.Cost.ToString();


        //Factory method:

        //IPurchase purchase;
        //if (ship is null)
        //    return "";

        //switch (purchaseType)
        //{
        //    case PurchaseType.TICKET:
        //        purchase = CreatePurchase(new TicketPurchaseFactory(), ship);
        //        break;
        //    case PurchaseType.CASH:
        //        purchase = CreatePurchase(new CashPurchaseFactory(), ship);
        //        break;
        //    default:
        //        purchase = CreatePurchase(new PointsPurchaseFactory(), ship);
        //        break;

        //}
        //if (purchaseType == PurchaseType.CASH)
        //    return "$" + purchase.Cost;

        //return purchase.Cost.ToString();
    }

    protected IPurchase CreatePurchase(TemplateBase template)
    {
        return template.GetPurchase();
    }

    protected async Task BuyShip()
    {
        //template method
        IPurchase purchase = PurchaseSwitch(selectedShip);
        
        await facade.HandleShipPurchase(purchase, purchaseType.Value, selectedShip, ownedShips);


        //Factory method
        //IPurchase purchase;

        //switch(purchaseType)
        //{
        //    case PurchaseType.TICKET:
        //        purchase = CreatePurchase(new TicketPurchaseFactory(), selectedShip);
        //        break;
        //    case PurchaseType.CASH:
        //        purchase = CreatePurchase(new CashPurchaseFactory(), selectedShip);
        //        break;
        //    default:
        //        purchase = CreatePurchase(new PointsPurchaseFactory(), selectedShip);
        //        break;
        //}

        //await facade.HandleShipPurchase(purchase, purchaseType.Value, selectedShip, ownedShips);
        await InvokeAsync(StateHasChanged);
    }

    protected IPurchase CreatePurchase(Factory factory, Ship ship)
    {
        IPurchase purchase = factory.GetCreatedPurchase(ship);
        return purchase;
    }

    private bool FilterFunc(Ship element)
    {
        if (ownedShips.Any(e => e.Id == element.Id))
            return false;
        return true;
    }
}