@page "/pointsshop"

@using BattleShipV3.Shared
@using BattleShipV3.Shared.Data
@using BattleShipV3.Data.Models
@using BattleShipV3.Client.Services
@using BattleShipV3.Shared.Data.Commands.User.Update
@using BattleShipV3.Shared.Data.Commands.UserShips.Create
@using MudBlazor
@using Models
@using Data

@inject NavigationManager Navigation
@inject UserShipsService userShipsService
@inject ShipService shipService
@inject UserService userService

<PageTitle>Points shop</PageTitle>

<MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">Welcome to the shop!</MudText>
<MudText Typo="Typo.h5" Align="Align.Center">Here you can spend your hard earned points to improve your gameplay experience.</MudText>
<br />
<MudTable Items="@ownedShips" Hover="true" Striped="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Owned ships</MudText>
        <MudSpacer />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Ship Name</MudTh>
        <MudTh>Ship Length</MudTh>
        <MudTh>Special</MudTh>
        <MudTh>Special Bonus</MudTh>
        <MudTh>Missile Type</MudTh>
        <MudTh>Missile Cooldown</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTh>@context.Name</MudTh>
        <MudTh>@context.Length</MudTh>
        <MudTh>@context.GetSpecialtyName()</MudTh>
        <MudTh>@context.GetSpecialtyBonus()</MudTh>
        <MudTh>@context.Missile.MissileType</MudTh>
        <MudTh>@context.Missile.Cooldown</MudTh>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>

</MudTable>
<br/>
<MudTable Items="@ships" Hover="true" Filter="new Func<Ship,bool>(FilterFunc)" @bind-SelectedItem="selectedShip" @onclick="@BuyShip">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Ships</MudText>
        <MudSpacer />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Ship Name</MudTh>
        <MudTh>Ship Length</MudTh>
        <MudTh>Special</MudTh>
        <MudTh>Special Bonus</MudTh>
        <MudTh>Missile Type</MudTh>
        <MudTh>Missile Cooldown</MudTh>
        <MudTh>Price</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTh>@context.Name</MudTh>
        <MudTh>@context.Length</MudTh>
        <MudTh>@context.GetSpecialtyName()</MudTh>
        <MudTh>@context.GetSpecialtyBonus()</MudTh>
        <MudTh>@context.Missile.MissileType</MudTh>
        <MudTh>@context.Missile.Cooldown</MudTh>
        <MudTh>@GetCost(context)</MudTh>
    </RowTemplate>

</MudTable>

@code {
    List<Ship> ownedShips { get; set; }
    List<Ship> ships { get; set; }
    Ship selectedShip { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Global.CurrentUser is null)
        {
            Navigation.NavigateTo("/login");
            return;
        }
        ownedShips = await shipService.GetShipsByUserAsync(Global.CurrentUser.Id);
        ships = await shipService.GetShipsAsync();

        await InvokeAsync(StateHasChanged);
        StateHasChanged();
    }

    protected int GetCost(Ship ship)
    {
        var cost = 0;
        switch(ship)
        {
            case Healer:
                cost += 150;
                break;
            case Submarine:
                cost += 200;
                break;
            default:
                cost += 100;
                break;
        }

        cost += 25 * (4 - ship.Length);

        return cost;
    }

    protected async Task BuyShip()
    {
        if (GetCost(selectedShip) <= Global.CurrentUser.Points)
        {
            CreateUserShipsCommand userShip = new CreateUserShipsCommand(Global.CurrentUser, selectedShip);
            await userShipsService.InsertUserShipsAsync(userShip);
            ownedShips.Add(selectedShip); 
            Global.CurrentUser.Points -= GetCost(selectedShip);
            UpdateUserCommand cmd = new UpdateUserCommand(null, null, null, null, Global.CurrentUser.Points);
            await userService.UpdateUserAsync(Global.CurrentUser.Id, cmd);
            BattleShipV3.Models.User user = await userService.GetUserAsync(Global.CurrentUser.Email);

            Global.CurrentUser = user;
        }
        else
        {
            await Console.Out.WriteLineAsync("Nepakankamai taškų");
        }

        await InvokeAsync(StateHasChanged);
    }

    private bool FilterFunc(Ship element)
    {
        if (ownedShips.Any(e => e.Id == element.Id))
            return false;
        return true;
    }
}