@page "/Repertoire"
@using BattleShipV3.Client.DesignPatterns.Command
@using BattleShipV3.Client.DesignPatterns.Facade
@using BattleShipV3.Client.Services
@using BattleShipV3.Data.Models
@using BattleShipV3.Shared
@using BattleShipV3.Shared.Data.Commands.UserShips.Create
@using MudBlazor
@using MudBlazor.ThemeManager

@inject ShipService shipService;
@inject UserShipsService userShipService;
@inject NavigationManager Navigation;

<MudButton Color="Color.Secondary" Variant="Variant.Filled" Disabled="selectedSelectedShip == null" @onclick="RemoveShip" Style="margin:5px">Remove</MudButton>

<MudTable Items="@selectedShips" Hover="true" Striped="true" Filter="new Func<Ship,bool>(FilterFunc1)" @bind-SelectedItem="selectedSelectedShip">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Selected Ships</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Ship Name</MudTh>
        <MudTh>Ship Length</MudTh>
        <MudTh>Special</MudTh>
        <MudTh>Special Bonus</MudTh>
        <MudTh>Missile Name</MudTh>
        <MudTh>Missile Type</MudTh>
        <MudTh>Missile Cooldown</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTh>@context.Name</MudTh>
        <MudTh>@context.Length</MudTh>
        <MudTh>@context.GetSpecialtyName()</MudTh>
        <MudTh>@context.GetSpecialtyBonus()</MudTh>
        <MudTh>@context.Missile.Name</MudTh>
        <MudTh>@context.Missile.MissileType</MudTh>
        <MudTh>@context.Missile.Cooldown</MudTh>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>

</MudTable>

<hr />

<MudButton Color="Color.Secondary" Variant="Variant.Filled" Disabled="selectedOwnedShip == null || selectedShips.Any(e => e.Length == selectedOwnedShip.Length) || selectedShips.Count >= 4" 
    @onclick="AddShip" Style="margin:5px">Select</MudButton>


<MudButton Color="Color.Secondary" Variant="Variant.Filled" Disabled="!isShipAdded" 
    @onclick="UndoSelectShip" Style="margin:5px">Undo</MudButton>

<MudTable Items="@ownedShips" Hover="true" Striped="true" @bind-SelectedItem="selectedOwnedShip">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Owned ship</MudText>
        <MudSpacer />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Ship Name</MudTh>
        <MudTh>Ship Length</MudTh>
        <MudTh>Special</MudTh>
        <MudTh>Special Bonus</MudTh>
        <MudTh>Missile Name</MudTh>
        <MudTh>Missile Type</MudTh>
        <MudTh>Missile Cooldown</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTh>@context.Name</MudTh>
        <MudTh>@context.Length</MudTh>
        <MudTh>@context.GetSpecialtyName()</MudTh>
        <MudTh>@context.GetSpecialtyBonus()</MudTh>
        <MudTh>@context.Missile.Name</MudTh>
        <MudTh>@context.Missile.MissileType</MudTh>
        <MudTh>@context.Missile.Cooldown</MudTh>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>

</MudTable>

@code {
    List<Ship> selectedShips { get; set; }
    List<Ship> ownedShips { get; set; }
    List<Ship> AllShips { get; set; }

    Ship selectedSelectedShip { get; set; }
    Ship selectedOwnedShip { get; set; }

    string searchString { get; set; }

    ICommand command;

    bool isShipAdded { get; set; } = false;

    Facade facade { get; set; }

    protected override async Task OnInitializedAsync()
    {
        command = new SelectShipCommand(shipService, userShipService);
        if(Global.CurrentUser is null)
        {
            Navigation.NavigateTo("/login");
            return;
        }
        ownedShips = await shipService.GetShipsByUserAsync(Global.CurrentUser.Id);
        selectedShips = await shipService.GetShipsByUserAsync(Global.CurrentUser.Id, true);

        facade = new Facade(userShipService, shipService, null);

        await InvokeAsync(StateHasChanged);
        StateHasChanged();
    }

    protected async Task UndoSelectShip()
    {
        isShipAdded = false;
        await command.Undo(Global.CurrentUser.Id, selectedOwnedShip.Id);
        selectedShips.Remove(selectedSelectedShip);
        ownedShips.Add(selectedSelectedShip);
        await InvokeAsync(StateHasChanged);
    }

    protected async Task AddShip()
    {
        await command.Execute(Global.CurrentUser.Id, selectedOwnedShip.Id);

        ownedShips.Remove(selectedOwnedShip);
        selectedShips.Add(selectedOwnedShip);

        selectedSelectedShip = selectedOwnedShip;

        isShipAdded = true;
        await InvokeAsync(StateHasChanged);
    }

    protected async Task RemoveShip()
    {
        await facade.UserRemoveShip(selectedShips, ownedShips, selectedSelectedShip, Global.CurrentUser.Id);
        await InvokeAsync(StateHasChanged);
    }

    private bool FilterFunc1(Ship element) => FilterFunc(element, searchString);

    private bool FilterFunc(Ship element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
